/* Sample data representing an array of objects */
const data = [
  { name: "Alice", age: 25, city: "New York" },
  { name: "Bob", age: 30, city: "Los Angeles" },
  { name: "Charlie", age: 22, city: "Chicago" },
  { name: "David", age: 28, city: "San Francisco" },
];

/* Function to filter data based on age */
function filterDataByAge(minAge, maxAge) {
  /*
    Using Array.filter() to get objects with age within the given range.
    Returns a new array with objects meeting the filter condition.
  */
  return data.filter((person) => person.age >= minAge && person.age <= maxAge);
}

/* Function to convert data to a string format */
function convertDataToString() {
  /*
    Using Array.map() to convert each object to a formatted string
    and then joining the strings with newline character to get a multiline string.
  */
  return data.map((person) => `Name: ${person.name}, Age: ${person.age}, City: ${person.city}`).join("\n");
}

/* Function to calculate the average age */
function calculateAverageAge() {
  /*
    Using Array.reduce() to sum all ages and then dividing by the number of objects
    to get the average age.
  */
  const totalAge = data.reduce((sum, person) => sum + person.age, 0);
  return totalAge / data.length;
}

/* Function to find a person by name */
function findPersonByName(name) {
  /*
    Using Array.find() to get the first object with the matching name.
    Returns the found object or undefined if not found.
  */
  return data.find((person) => person.name === name);
}

/* Function to sort data by age in ascending order */
function sortDataByAgeAscending() {
  /*
    Using Array.sort() with a custom comparator function to sort the data by age in ascending order.
    Returns a new sorted array without modifying the original data.
  */
  return data.slice().sort((a, b) => a.age - b.age);
}

/* Function to sort data by age in descending order */
function sortDataByAgeDescending() {
  /*
    Using Array.sort() with a custom comparator function to sort the data by age in descending order.
    Returns a new sorted array without modifying the original data.
  */
  return data.slice().sort((a, b) => b.age - a.age);
}

// Testing the functions
console.log("Original Data:");
console.log(data);

console.log("\nFiltering Data by Age (between 25 and 30):");
console.log(filterDataByAge(25, 30));

console.log("\nData as a String:");
console.log(convertDataToString());

console.log("\nAverage Age:");
console.log(calculateAverageAge());

console.log("\nFinding a Person by Name (David):");
console.log(findPersonByName("David"));

console.log("\nSorting Data by Age (Ascending):");
console.log(sortDataByAgeAscending());

console.log("\nSorting Data by Age (Descending):");
console.log(sortDataByAgeDescending());

